from copy import copy

import emoji

from aiogram import Router
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent

from app.database.user.models import User
from app.handlers.weather.default_results import DefaultResults
from app.keyboards.inline import city_keyboard
from app.keyboards.inline_location import inline_location_keyboard
from app.services.weather.api_weatherapi.get_weather_by_coordinates import get_weather_by_coordinates
from app.services.weather.data import Cities

router = Router()


@router.inline_query()
async def show_city_weather(inline_query: InlineQuery):
    results = DefaultResults.default_results()
    if inline_query.query != "":
        list_cities = Cities.search_in_list(inline_query.query)
        if list_cities:
            results = []
            for index, city in enumerate(list_cities):
                results.append(
                    InlineQueryResultArticle(
                        id=str(index),
                        title=city,
                        description="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É!",
                        input_message_content=InputTextMessageContent(
                            message_text=f'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ {city} ^_^',
                        ),
                        reply_markup=city_keyboard(Cities.dict_cities_ru[city].id)
                    )
                )
        else:
            results = DefaultResults.not_found

    user = User.get_by_id_or_create(inline_query.from_user)
    results = copy(results)

    if user.location is not None:
        # TODO: –ù–∞–ø–∏—Å–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Redis —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∞—Å—å –ø–æ–≥–æ–¥–∞ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ –ø–æ–ª—á–∞—Å–∞ –≤ –æ–¥–Ω–æ–π —Ç–æ—á–∫–µ
        weather = await get_weather_by_coordinates(
            latitude=user.location[0],
            longitude=user.location[1]
        )
        results.insert(0, InlineQueryResultArticle(
            id="location",
            title="–ü–æ–≥–æ–¥–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏",
            description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É –≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∑–∞–¥–∞–ª–∏ –≤ –±–æ—Ç–µ",
            input_message_content=InputTextMessageContent(
                message_text=f'*–í –∑–∞–¥–∞–Ω–Ω–æ–º –≤–∞–º–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏*{emoji.emojize("üó∫")}\n\n'
                             f'{weather.rus_string()}',
                parse_mode="Markdown"
            )
        ))
    else:
        results.insert(0, InlineQueryResultArticle(
            id="location",
            title="–ü–æ–≥–æ–¥–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏",
            description="–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –±–æ—Ç–µ, —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–º –ø–æ–≥–æ–¥—É",
            input_message_content=InputTextMessageContent(
                message_text=f'–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –±–æ—Ç–µ!!'
            )
        ))

    await inline_query.answer(results, is_personal=True, cache_time=0)
